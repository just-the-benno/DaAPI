

@page "/interfaces/dhcpv6"
@layout AdminLayout
@attribute [Authorize]
@inject DaAPIService _service
@inject LayoutService _layoutService
@inject IModalService _modalService
@inject IToastService _toastService
@inject IStringLocalizer<DHCPv6InterfacesPage> L

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header border-0 d-flex flex-row align-items-center">
                    <h3 class="card-title">@L["TitleForUsedInterfaces"]</h3>
                    <span class="flex-fill"></span>
                </div>
                <div class="card-body table-responsive p-0">
                    <LoadingWhileContentNull Item="_interfaceOverview">
                        @if (_interfaceOverview.ActiveEntries.Any() == false)
                        {
                            <p class="m-3">@L["NoActiveInterfacesContent"]</p>
                        }
                        else
                        {
                            <table class="table table-striped table-valign-middle">
                                <thead>
                                    <tr>
                                        <th>@L["ActiveInterfaceTableHeadName"]</th>
                                        <th>@L["ActiveInterfaceTableHeadInterface"]</th>
                                        <th>@L["ActiveInterfaceTableHeadMAC"]</th>
                                        <th>@L["ActiveInterfaceTableHeadIP"]</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in _interfaceOverview.ActiveEntries)
                                    {
                                        <tr>
                                            <td>@item.Name</td>
                                            <td>
                                                @item.PhysicalInterfaceName
                                            </td>
                                            <td>
                                                @item.MACAddress.PrintAsMacAddress()
                                            </td>
                                            <td>@item.IPv6Address</td>
                                            <td>
                                                <div class="btn-group">
                                                    <button role="button" class="btn btn-default" @onclick="(() => ShowDeleteModal(item))"><i class="fas fa-trash mr-2"></i>Delete</button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </LoadingWhileContentNull>
                </div>
            </div>
            <!-- /.card -->
        </div>
        <div class="col-12">
            <div class="card">
                <div class="card-header border-0 d-flex flex-row align-items-center">
                    <h3 class="card-title">@L["TitleForPossibleInterfaces"]</h3>
                    <span class="flex-fill"></span>
                </div>
                <div class="card-body table-responsive p-0">
                    <LoadingWhileContentNull Item="_interfaceOverview">
                        @if (_interfaceOverview.Entries.Any() == false)
                        {
                            <p>no interfaces found</p>
                        }
                        else
                        {
                            <table class="table table-striped table-valign-middle">
                                <thead>
                                    <tr>
                                        <th>@L["PossibleInterfaceTableHeadInterface"]</th>
                                        <th>@L["PossibleInterfaceTableHeadMAC"]</th>
                                        <th>@L["PossibleInterfaceTableHeadIP"]</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in _interfaceOverview.Entries)
                                    {
                                        <tr>
                                            <td>
                                                @item.InterfaceName
                                            </td>
                                            <td>
                                                @item.MACAddress.PrintAsMacAddress()
                                            </td>
                                            <td>@item.IPv6Address</td>
                                            <td>
                                                <div class="btn-group">
                                                    <button role="button" class="btn btn-default" @onclick="(() => ShowAddInterfaceModal(item))"><i class="fas fa-plus mr-2"></i>@L["CreateButtonCaption"]</button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </LoadingWhileContentNull>
                </div>
            </div>
            <!-- /.card -->
        </div>
    </div>
</div>

@code {

    private DHCPv6InterfaceOverview _interfaceOverview;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _layoutService.UpdatePageTitle(L["PageTitle"]);
        _layoutService.UpdateBreadcrumbs(new BreadcrumbViewModel[] { new BreadcrumbViewModel { Caption = L["BreadcrumbHomeCaption"], Link = "dashboard" }, new BreadcrumbViewModel { Caption = @L["BreadcrumbCaption"], Link = "interfaces/dhcpv6" } });
    }

    protected override async Task OnInitializedAsync()
    {
        _interfaceOverview = await _service.GetDHCPv6Interfaces();

        await base.OnInitializedAsync();
    }


    public async Task ShowAddInterfaceModal(DHCPv6InterfaceEntry entry)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(CreateDHCPv6InterfaceModal.Entry), entry);

        var messageForm = _modalService.Show<CreateDHCPv6InterfaceModal>(String.Format(L["CreateInterfaceModalHeader"], entry.InterfaceName), parameters);
        var result = await messageForm.Result;

        if (result.Cancelled == false && result.Data is Boolean && (Boolean)result.Data == true)
        {
            _toastService.ShowSuccess(String.Format(L["CreateToastSuccessContent"],entry.IPv6Address), L["ToastSuccessTitle"]);
            _interfaceOverview = await _service.GetDHCPv6Interfaces();
        }
    }

    public async Task ShowDeleteModal(ActiveDHCPv6InterfaceEntry enty)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(DeleteDHCPv6InterfaceModal.Entry), enty);

        var messageForm = _modalService.Show<DeleteDHCPv6InterfaceModal>($"{L["DeleteModalTitle"]} {enty.Name}", parameters);
        var result = await messageForm.Result;

        if (result.Cancelled == false && result.Data is Boolean && (Boolean)result.Data == true)
        {
            _toastService.ShowSuccess(String.Format(L["DeleteToastSuccessContent"],enty.Name), L["ToastSuccessTitle"]);
            _interfaceOverview = await _service.GetDHCPv6Interfaces();
        }
    }
}
