@page "/first-steps"
@layout SinglePageLayout
@inject AnnomynousDaAPIService _service
@inject NavigationManager _navManager
@inject IJSRuntime _jsruntime
@inject IStringLocalizer<FirstStepsPage> L

<div class="login-page register-page flex-fill">
    <div class="login-box">
        <div class="login-logo">
            <a href="#"><b>DaAPI</b> - DHCP and API</a>
        </div>
        <!-- /.login-logo -->

        <div class="alert alert-info alert-dismissible">
            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
            <h5><i class="icon fas fa-info"></i> @L["FirstStartDialogCaption"]</h5>
            <p>@L["FirstStartFirstLineText"]</p>
            <i>@L["SecondStartFirstLineText"]</i>
        </div>

        @if (_serviceError == true)
        {
            <div class="alert alert-danger">
                <h5><i class="icon fas fa-ban"></i> @L["ErrorCaption"]</h5>
                @L["ErrorText"]
            </div>
        }

        <div class="card">
            <div class="card-header">
                <h3 class="card-title">@L["Headline"]</h3>
            </div>
            <div class="card-body login-card-body">

                <EditForm EditContext="@_editContext" OnValidSubmit="InitilizeServer">
                    <DataAnnotationsValidator />
                    @if (IntilizeResponse.OpenIdIsLocal == true)
                    {
                        <p>@L["CreateAdminAccountContext"]</p>
                        <div class="input-group mb-3">
                            <BootstrapInputText @bind-Value="_model.Username" class="form-control" placeholder="@L["UsernamePlaceholder"]" disabled="@(_sendingRequestInProgress == true)" />
                            <div class="input-group-append">
                                <div class="input-group-text">
                                    <span class="fas fa-user"></span>
                                </div>
                            </div>
                            <div class="invalid-feedback mb-3">
                                <ValidationMessage For="@(() => _model.Username)" />
                            </div>
                        </div>

                        <div class="input-group mb-3">
                            <BootstrapInputText @bind-Value="_model.Password" type="password" class="form-control" placeholder="@L["PasswordPlaceholder"]" disabled="@(_sendingRequestInProgress == true)" />
                            <div class="input-group-append">
                                <div class="input-group-text">
                                    <span class="fas fa-lock"></span>
                                </div>
                            </div>
                            <div class="invalid-feedback mb-3">
                                <ValidationMessage For="@(() => _model.Password)" />
                            </div>
                        </div>
                        <div class="input-group mb-3">
                            <BootstrapInputText @bind-Value="_model.PasswordConfirmation" type="password" class="form-control" placeholder="@L["PasswordConfirmationPlaceholder"]" disabled="@(_sendingRequestInProgress == true)" />
                            <div class="input-group-append">
                                <div class="input-group-text">
                                    <span class="fas fa-lock"></span>
                                </div>
                            </div>
                            <div class="invalid-feedback mb-3">
                                <ValidationMessage For="@(() => _model.PasswordConfirmation)" />
                            </div>
                        </div>
                    }
                    <div class="d-flex flex-row">
                        <div class="d-flex flex-fill"> </div>
                        @if (_sendingRequestInProgress == false)
                        {
                            <button type="submit" class="px-3 d-flex btn btn-primary" disabled="@(_formIsValid == false)">@L["InitilizeButtonCaption"]</button>
                        }
                        else
                        {
                            <button class="px-3 btn d-flex flex-row align-items-center btn-primary" type="button" disabled>
                                <span class="spinner-grow spinner-grow-sm mr-3" role="status" aria-hidden="true"></span>
                                @L["InitilizingButtonCaption"]
                            </button>
                        }

                    </div>
                </EditForm>
            </div>
            <!-- /.login-card-body -->
        </div>

    </div>
</div>

@code {

    #region Fields

    private InitizeServerViewModel _model = new InitizeServerViewModel();
    private Boolean _formIsValid = false;
    private EditContext _editContext;
    private Boolean _sendingRequestInProgress = false;
    private Boolean _serviceError = false;

    #endregion

    #region Properties

    [CascadingParameter(Name = nameof(ServerInitilizedState.ServerInitilizedResponse))]
    protected ServerInitilizedResponse IntilizeResponse { get; set; }

    #endregion

    #region Life cycles

    public FirstStepsPage()
    {

    }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_model);
        _editContext.OnFieldChanged += HandleFieldChanged;
        //_formIsValid = _editContext.Validate();
    }

    public void Dispose()
    {
        _editContext.OnFieldChanged -= HandleFieldChanged;
    }

    #endregion

    #region Methods

    public void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        _formIsValid = _editContext.Validate();
        StateHasChanged();
    }

    public async Task InitilizeServer()
    {
        var request = _model.GetRequest();
        _serviceError = false;
        _sendingRequestInProgress = true;

        Boolean serviceResult =  await _service.InitilizeServer(request);
        _sendingRequestInProgress = false;
        if (serviceResult == true)
        {
            await _jsruntime.InvokeVoidAsync("finishInitilize", Array.Empty<Object>());
        }
        else
        {
            _serviceError = true;
        }
    }

    #endregion


}
