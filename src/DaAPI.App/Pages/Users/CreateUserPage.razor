@inherits AdvancedFormComponent<CreateLocalUserViewModel>

@page "/users/create"
@layout AdminLayout
@attribute [Authorize]
@inject DaAPIService _service
@inject LayoutService _layoutService
@inject IToastService _toastService
@inject NavigationManager _navigator
@inject IStringLocalizer<CreateUserPage> L


<div class="container-fluid">

    @if (_serviceErrorOccured == true)
    {
        <div class="row justify-content-center">
            <div class="alert alert-danger modal-sm">
                <h5><i class="icon fas fa-ban"></i> @L["CreateUserErrorCaption"]</h5>
                @L["CreateUserErrorText"]
            </div>
        </div>
    }

    <div class="row justify-content-center">
        <div class="card modal-sm">
            <div class="card-header">
                <h3 class="card-title">@L["Headline"]</h3>
            </div>
            <div class="card-body login-card-body">
                <CascadingValue Name="DisableFormElements" Value="@_sendingRequestInProgress">

                    <EditForm EditContext="@EditContext" OnValidSubmit="SendCreateUserRequest">
                        <DataAnnotationsValidator />

                        <p>Create your admin account</p>
                        <div class="input-group mb-3">
                            <BootstrapInputText @bind-Value="Model.Username" class="form-control" placeholder="@L["UsernamePlaceholder"]"/>
                            <div class="input-group-append">
                                <div class="input-group-text">
                                    <span class="fas fa-user"></span>
                                </div>
                            </div>
                            <div class="invalid-feedback mb-3">
                                <ValidationMessage For="@(() => Model.Username)" />
                            </div>
                        </div>

                        <div class="input-group mb-3">
                            <BootstrapInputText @bind-Value="Model.Password" type="password" class="form-control" placeholder="@L["PasswordPlaceholder"]"/>
                            <div class="input-group-append">
                                <div class="input-group-text">
                                    <span class="fas fa-lock"></span>
                                </div>
                            </div>
                            <div class="invalid-feedback mb-3">
                                <ValidationMessage For="@(() => Model.Password)" />
                            </div>
                        </div>
                        <div class="input-group mb-3">
                            <BootstrapInputText @bind-Value="Model.PasswordConfirmation" type="password" class="form-control" placeholder="@L["PasswordConfirmationPlacehoder"]" />
                            <div class="input-group-append">
                                <div class="input-group-text">
                                    <span class="fas fa-lock"></span>
                                </div>
                            </div>
                            <div class="invalid-feedback mb-3">
                                <ValidationMessage For="@(() => Model.PasswordConfirmation)" />
                            </div>
                        </div>
                        <div class="d-flex flex-row">
                            <div class="d-flex flex-fill"> </div>
                            <SendingAwareSubmitFormButton Caption="@L["CreateButtonCaption"]" ExecutingCaption="@L["CreatingButtonCaption"]" FormIsSending="_sendingRequestInProgress" FormIsValid="FormIsValid" />
                        </div>
                    </EditForm>
                </CascadingValue>
            </div>
            <!-- /.login-card-body -->
        </div>
    </div>
</div>

@code {
    #region Fields

    private Boolean _sendingRequestInProgress = false;
    private Boolean _serviceErrorOccured = false;

    #endregion

    #region Properties

    #endregion

    #region Methods


    public async Task SendCreateUserRequest()
    {
        var request = Model.GetRequest();
        _serviceErrorOccured = false;
        _sendingRequestInProgress = true;

        Boolean serviceResult = await _service.CreateLocalUser(request);
        _serviceErrorOccured = !serviceResult;
        _sendingRequestInProgress = false;
        if (serviceResult == true)
        {
            _toastService.ShowSuccess(String.Format(L["UserCreateSuccessContent"],Model.Username), L["UserCreateSuccessCaption"]);
            _navigator.NavigateTo("/users");
        }
    }

    #endregion
}
