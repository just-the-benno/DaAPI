
@page "/users"
@layout AdminLayout
@attribute [Authorize]
@inject DaAPIService service
@inject LayoutService _layoutService
@inject IModalService _modalService
@inject IToastService _toastService
@inject SignOutService _signOutService
@inject IStringLocalizer<UsersPage> L

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Default box -->
            <div class="card">
                <div class="card-header border-0 d-flex flex-row align-items-center">
                    <h3 class="card-title">@L["Headline"]</h3>
                    <span class="flex-fill"></span>
                    <div class="card-tools">
                        <NavLink href="/users/create" class="btn btn-primary">
                            <i class="fas fa-plus mr-2"></i>
                            @L["NewUserButtonCaption"]
                        </NavLink>
                    </div>
                </div>
                <div class="card-body table-responsive p-0">
                    <LoadingWhileContentNull Item="_users">
                        <table class="table table-striped table-valign-middle">
                            <thead>
                                <tr>
                                    <th>@L["UserTableHeaderForName"]</th>
                                    <th>@L["UserTableHeaderForActions"]</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in _users)
                                {
                                    <tr>
                                        <td>@item.Name</td>
                                        <td>
                                            <div class="btn-group">
                                                <button role="button" class="btn btn-default" @onclick="(() => ShowChangePasswordModal(item))"><i class="fas fa-key mr-2"></i>@L["ChangePasswordButtonCaption"]</button>
                                                @if (_currentUserId != item.Id)
                                                {
                                                    <button role="button" class="btn btn-default" @onclick="(() => ShowDeleteModal(item))"><i class="fas fa-trash mr-2"></i>@L["DeleteUserButtonCaption"]</button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </LoadingWhileContentNull>
                </div>
            </div>
            <!-- /.card -->
        </div>
    </div>
</div>

@code {

    private String _currentUserId;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private ICollection<LocalUserOverview> _users;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _layoutService.UpdatePageTitle(L["PageTitle"]);
        _layoutService.UpdateBreadcrumbs(new BreadcrumbViewModel[] {
            new BreadcrumbViewModel { Caption = L["BreadcrumbHomeTitle"], Link = "dashboard" },
            new BreadcrumbViewModel { Caption = L["BreadcrumbSelfTitle"], Link = "users" } });
    }

    protected override async Task OnInitializedAsync()
    {
        var currentUser = (await AuthenticationStateTask).User;
        _currentUserId = currentUser.Claims.FirstOrDefault(x => x.Type == "sub")?.Value;

        _users = (await service.GetUsers())?.ToList();

        await base.OnInitializedAsync();
    }


    public async Task ShowChangePasswordModal(LocalUserOverview user)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ChangeLocalUserPasswordModal.User), user);

        var messageForm = _modalService.Show<ChangeLocalUserPasswordModal>(String.Format(L["ChangePasswordModalTitle"], user.Name), parameters);
        var result = await messageForm.Result;

        if (result.Cancelled == false && result.Data is Boolean && (Boolean)result.Data == true)
        {
            if (_currentUserId == user.Id)
            {
                _toastService.ShowInfo(L["ChangePasswordSelfText"], L["ChangePasswordSuccessCaption"]);
                await Task.Delay(1500);
                await _signOutService.BeginSignOut();
            }
            else
            {
                _toastService.ShowSuccess(String.Format(L["ChangePasswordForUserSuccessText"],user.Name), L["ChangePasswordSuccessCaption"]);
            }
        }
    }

    public async Task ShowDeleteModal(LocalUserOverview user)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(DeleteLocalUserModal.User), user);

        var messageForm = _modalService.Show<DeleteLocalUserModal>(String.Format(L["DeleteUserModalHeader"],user.Name), parameters);
        var result = await messageForm.Result;

        if (result.Cancelled == false && result.Data is Boolean && (Boolean)result.Data == true)
        {
            _toastService.ShowSuccess(String.Format(L["DeleteUserSuccessText"],user.Name), L["DeleteUserSuccessCaption"]);
            _users.Remove(user);
        }
    }

}
