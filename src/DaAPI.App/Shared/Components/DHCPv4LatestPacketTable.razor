@inject IModalService _modalService
@inject DHCPv4PacketResponseCodeHelper _responseCodeHelper
@inject IStringLocalizer<DHCPv4LatestPacketTable> L

<div class="card">
    <div class="card-header border-0">
        <h3 class="card-title">@L["Title"]</h3>
        @*<div class="card-tools">
                <a href="#" class="btn btn-tool btn-sm">
                    <i class="fas fa-download"></i>
                </a>
                <a href="#" class="btn btn-tool btn-sm">
                    <i class="fas fa-bars"></i>
                </a>
            </div>*@
    </div>
    <div class="card-body table-responsive">
        <LoadingWhileContentNull Item="Packets">
            @if (Packets.Any() == true)
            {
                <DataTable TModel="DHCPv4PacketHandledEntryViewModel" PageSize="20" Items="Packets" UsePaging="true" SearchOnApplyHeaderFilter="true" IncludeHeaderFilters="true" IncludeAdvancedFilters="false">
                    @if (DisplayScopes == true)
                    {
                        <DataTableColumn TModel="DHCPv4PacketHandledEntryViewModel" IsSortable="true" IsFilterable="true" Property="(e) => e.Scope.Name" CustomTitle="@L["TableHeaderCaptionScope"]" />
                    }
                    <DataTableColumn TModel="DHCPv4PacketHandledEntryViewModel" IsSortable="true" IsFilterable="true" Property="(e) => e.Timestamp" CustomTitle="@L["TableHeaderCaptionTimestamp"]" />
                    <DataTableColumn TModel="DHCPv4PacketHandledEntryViewModel" IsSortable="true" IsFilterable="true" Property="(e) => e.Request.Header.Source" CustomTitle="@L["TableHeaderCaptionSource"]" />
                    <DataTableColumn TModel="DHCPv4PacketHandledEntryViewModel" IsSortable="true" IsFilterable="true" Property="(e) => e.RequestType" CustomTitle="@L["TableHeaderCaptionRequestType"]"  />
           
                    <DataTableColumn TModel="DHCPv4PacketHandledEntryViewModel" IsSortable="false" IsFilterable="false" HeaderFilterType="Sve.Blazor.Core.Models.ObjectFilter.IsNotNull" Property="(e) => e.RequestType" CustomTitle="@L["TableHeaderCaptionRequest"]">
                        <RowTemplate Context="entry">
                            <button type="button" class="btn btn-link" @onclick="() => ShowPacketContent(entry.Request)" @onclick:stopPropagation> @entry.Request.Content.Length Bytes </button>
                        </RowTemplate>
                    </DataTableColumn>
                    <DataTableColumn TModel="DHCPv4PacketHandledEntryViewModel" IsSortable="true" IsFilterable="true" Property="(e) => e.ResultCode" CustomTitle="@L["TableHeaderCaptionResponseCode"]">
                        <RowTemplate Context="entry">
                            @if (entry.ResultCode == 0)
                            {
                                <i class="fas fa-check-circle" style="color: green;"></i>
                            }
                            else
                            {
                                <span>
                                    <i class="far fa-times-circle" style="color: red;"></i>
                                    @_responseCodeHelper.GetErrorName(entry.RequestType, entry.ResultCode)
                                </span>
                            }
                        </RowTemplate>
                    </DataTableColumn>
                    <DataTableColumn TModel="DHCPv4PacketHandledEntryViewModel" IsSortable="true" IsFilterable="true" Property="(e) => e.ResponseType" CustomTitle="@L["TableHeaderCaptionResponseType"]" />
                    <DataTableColumn TModel="DHCPv4PacketHandledEntryViewModel" IsSortable="false" IsFilterable="false" Property="(e) => e.ResponseType" HeaderFilterType="Sve.Blazor.Core.Models.ObjectFilter.IsNotNull" CustomTitle="@L["TableHeaderCaptionResponse"]">
                        <RowTemplate Context="entry">
                            @if (entry.Response != null)
                            {
                                <button type="button" class="btn btn-link" @onclick="(() => ShowPacketContent(entry.Response))"> @entry.Response.Content.Length Bytes </button>
                            }
                            else
                            {
                                <span>No data</span>
                            }
                        </RowTemplate>
                    </DataTableColumn>
                </DataTable>
            }
            else
            {
                <div class="tab-pane active">
                    @L["TableContentNoDataFound"]
                </div>
            }
        </LoadingWhileContentNull>
    </div>
</div>

@code {
    [Parameter] public IList<DHCPv4PacketHandledEntryViewModel> Packets { get; set; }
    [Parameter] public Boolean DisplayScopes { get; set; } = true;

    public void ShowPacketContent(DHCPv4PacketInformation info)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(DHCPv4PacketDetailsModal.Packet), info.GetPacket());

        _modalService.Show<DHCPv4PacketDetailsModal>($"{L["ModalHeaderForPacketDetails"]}", parameters, new ModalOptions { Class = "blazored-modal modal-lg modal-content" });
    }
}
